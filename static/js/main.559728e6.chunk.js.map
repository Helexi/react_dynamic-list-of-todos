{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setUserId","useState","isComplete","setIsComplete","visibleTodos","setVisibleTodos","filterByTitle","setFilterByTitle","useEffect","filter","todo","filterByToLower","toLowerCase","titleToLower","title","includes","completed","className","type","value","onChange","event","target","name","map","item","checked","readOnly","userId","onClick","id","BASE_URL","getUser","a","fetch","response","json","getTodos","CurrentUser","clearUser","currentUser","setCurrentUser","errorLoad","setErrorLoad","fetchUser","useCallback","newUser","email","phone","App","selectedUserId","setSelectedUserId","setTodos","getData","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.559728e6.chunk.js","sourcesContent":["import {\n  Dispatch, FC, useState, useEffect,\n} from 'react';\nimport './TodoList.scss';\n\ninterface Props {\n  todos: Todo[];\n  setUserId: Dispatch<number>,\n}\n\nexport const TodoList: FC<Props> = ({\n  todos,\n  setUserId,\n}) => {\n  const [isComplete, setIsComplete] = useState('show all');\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n  const [filterByTitle, setFilterByTitle] = useState<string>('');\n\n  useEffect(() => {\n    setVisibleTodos(todos.filter(todo => {\n      const filterByToLower = filterByTitle.toLowerCase();\n      const titleToLower = todo.title.toLowerCase().includes(filterByToLower);\n\n      switch (isComplete) {\n        case 'show all':\n          return titleToLower;\n\n        case 'not completed':\n          return titleToLower\n            && !todo.completed;\n\n        case 'completed':\n          return titleToLower\n            && todo.completed;\n\n        default:\n          return todo;\n      }\n    }));\n  }, [filterByTitle, isComplete, todos]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__sort\">\n        <label>\n          Sort by title:\n          <input\n            className=\"TodoList__input\"\n            type=\"text\"\n            value={filterByTitle}\n            onChange={(event) => {\n              setFilterByTitle(event.target.value);\n            }}\n          />\n        </label>\n\n        <label>\n          Sort by status:\n          <select\n            className=\"TodoList__input\"\n            name=\"isCompleted\"\n            onChange={({ target }) => {\n              setIsComplete(target.value);\n            }}\n          >\n            <option value=\"show all\">\n              Show all\n            </option>\n\n            <option value=\"not completed\">\n              Not completed\n            </option>\n\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </label>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(item => {\n            return (\n              <li\n                key={item.id}\n                className={`TodoList__item\n                  TodoList__item--${item.completed ? 'checked' : 'unchecked'}`}\n              >\n                <label>\n                  <input\n                    checked={item.completed}\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{item.title}</p>\n                </label>\n\n                {item.userId && (\n                  <button\n                    className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                    type=\"button\"\n                    onClick={() => setUserId(item.userId)}\n                  >\n                    User&nbsp;#\n                    {item.userId}\n                  </button>\n                )}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api/';\n\nexport const getUser = async (id: number): Promise<User> => {\n  const response = await fetch(`${BASE_URL}/users/${id}`);\n\n  return response.json();\n};\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n","import {\n  FC, useEffect, useState, useCallback,\n} from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number;\n  clearUser: () => void;\n};\n\nexport const CurrentUser: FC<Props> = ({\n  userId,\n  clearUser,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [errorLoad, setErrorLoad] = useState<boolean | null>(null);\n\n  const fetchUser = useCallback(async () => {\n    try {\n      const newUser = await getUser(userId);\n\n      setCurrentUser(newUser);\n      setErrorLoad(null);\n    } catch {\n      setCurrentUser(null);\n      setErrorLoad(true);\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    fetchUser();\n  }, [userId]);\n\n  return (\n    <>\n      {currentUser && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${currentUser.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {currentUser.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {currentUser.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {currentUser.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n\n      {errorLoad && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Try again\n            </span>\n          </h2>\n        </div>\n      )}\n    </>\n  );\n};\n","import {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const clearUser = useCallback(() => setSelectedUserId(0), []);\n\n  const getData = useCallback(async () => {\n    const data = await getTodos();\n\n    setTodos(data);\n  }, []);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          setUserId={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}